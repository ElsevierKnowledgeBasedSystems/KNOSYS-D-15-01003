// Generated by CoffeeScript 1.4.0
var ACLMessage, ACLPerformative, AID, Agent, AgentObserver, OpCode, Radigost, XJAF;

XJAF = (function() {

  function XJAF() {}

  XJAF.getAgClasses = function(onSuccess, onError) {
    return $.ajax("rest/agents/classes", {
      type: "GET",
      dataType: "json",
      success: onSuccess,
      error: onError
    });
  };

  XJAF.getRunning = function(onSuccess, onError) {
    return $.ajax("rest/agents/running", {
      type: "GET",
      dataType: "json",
      success: onSuccess,
      error: onError
    });
  };

  XJAF.start = function(agClass, name, onSuccess, onError) {
    return $.ajax(("rest/agents/running/" + agClass + "/" + name)({
      type: "PUT",
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      success: onSuccess,
      error: onError
    }));
  };

  XJAF.getPerformatives = function(onSuccess, onError) {
    return $.ajax("rest/messages", {
      type: "GET",
      dataType: "json",
      success: onSuccess,
      error: onError
    });
  };

  XJAF.post = function(msg, onSuccess, onError) {
    return $.ajax("rest/messages", {
      type: "POST",
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      success: onSuccess,
      error: onError
    });
  };

  XJAF.accept = function(url, aid, state, onSuccess, onError) {
    return $.ajax({
      url: "/siebog/rest/radigost",
      type: "PUT",
      contentType: "application/x-www-form-urlencoded; charset=UTF-8",
      data: {
        url: url,
        aid: aid,
        state: state
      },
      success: onSuccess,
      error: onError
    });
  };

  return XJAF;

})();

AID = (function() {

  function AID(name, hap) {
    this.name = name;
    this.hap = hap;
    this.str = "" + this.name + "@" + this.hap;
  }

  return AID;

})();

AgentObserver = (function() {

  function AgentObserver() {}

  AgentObserver.prototype.onStart = function(aid) {};

  AgentObserver.prototype.onStep = function(aid, msg) {};

  AgentObserver.prototype.onStop = function(aid) {};

  return AgentObserver;

})();

OpCode = (function() {

  function OpCode() {}

  OpCode.INIT = 1;

  OpCode.STEP = 2;

  OpCode.MOVE_TO_SERVER = 3;

  return OpCode;

})();

Radigost = (function() {
  var running;

  running = {};

  function Radigost(hap) {
    this.hap = hap;
  }

  Radigost.prototype.start = function(url, name, observer, agentInitArgs) {
    var agent, msg, newAid;
    if (observer == null) {
      observer = null;
    }
    if (agentInitArgs == null) {
      agentInitArgs = null;
    }
    newAid = new AID(name, this.hap);
    if (!running.hasOwnProperty(newAid.str)) {
      agent = {};
      agent.url = url;
      agent.observer = observer;
      agent.worker = new Worker(url);
      agent.worker.onmessage = function(ev) {
        var msg, _ref, _ref1, _ref2, _ref3, _ref4;
        msg = ev.data;
        switch (msg.opcode) {
          case OpCode.INIT:
            return (_ref = running[msg.aid.str]) != null ? (_ref1 = _ref.observer) != null ? _ref1.onStart(msg.aid) : void 0 : void 0;
          case OpCode.STEP:
            return (_ref2 = running[msg.aid.str]) != null ? (_ref3 = _ref2.observer) != null ? _ref3.onStep(msg.aid, msg.info) : void 0 : void 0;
          case OpCode.MOVE_TO_SERVER:
            url = (_ref4 = running[msg.aid.str]) != null ? _ref4.url : void 0;
            if (url != null) {
              return XJAF.accept(url, msg.aid.str, msg.state);
            }
            break;
          default:
            return alert("Unrecognized message: " + JSON.stringify(msg));
        }
      };
      agent.worker.onerror = function(ev) {};
      running[newAid.str] = agent;
      msg = {
        opcode: OpCode.INIT,
        aid: newAid,
        args: agentInitArgs
      };
      agent.worker.postMessage(msg);
    }
    return newAid;
  };

  Radigost.prototype.post = function(msg) {
    var aid, _i, _len, _ref, _ref1, _results;
    _ref = msg.receivers;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      aid = _ref[_i];
      _results.push((_ref1 = running[aid.str]) != null ? _ref1.worker.postMessage(msg) : void 0);
    }
    return _results;
  };

  return Radigost;

})();

ACLPerformative = (function() {

  function ACLPerformative() {}

  ACLPerformative.ACCEPT_PROPOSAL = 0;

  ACLPerformative.AGREE = 1;

  ACLPerformative.CANCEL = 2;

  ACLPerformative.CFP = 3;

  ACLPerformative.CONFIRM = 4;

  ACLPerformative.DISCONFIRM = 5;

  ACLPerformative.FAILURE = 6;

  ACLPerformative.INFORM = 7;

  ACLPerformative.INFORM_IF = 8;

  ACLPerformative.INFORM_REF = 9;

  ACLPerformative.NOT_UNDERSTOOD = 10;

  ACLPerformative.PROPOSE = 11;

  ACLPerformative.QUERY_IF = 12;

  ACLPerformative.QUERY_REF = 13;

  ACLPerformative.REFUSE = 14;

  ACLPerformative.REJECT_PROPOSAL = 15;

  ACLPerformative.REQUEST = 16;

  ACLPerformative.REQUEST_WHEN = 17;

  ACLPerformative.REQUEST_WHENEVER = 18;

  ACLPerformative.SUBSCRIBE = 19;

  ACLPerformative.PROXY = 20;

  ACLPerformative.PROPAGATE = 21;

  ACLPerformative.UNKNOWN = -1;

  return ACLPerformative;

})();

ACLMessage = (function() {

  function ACLMessage(performative) {
    this.performative = performative;
    this.receivers = [];
  }

  ACLMessage.makeReply = function(msg, performative, sender) {
    var reply;
    reply = new ACLMessage(performative);
    reply.sender = sender;
    if (msg.replyTo != null) {
      reply.receivers.push(msg.replyTo);
    } else {
      reply.receivers.push(msg.sender);
    }
    reply.language = msg.language;
    reply.ontology = msg.ontology;
    reply.encoding = msg.encoding;
    reply.protocol = msg.protocol;
    reply.conversationId = msg.conversationId;
    reply.inReplyTo = msg.replyWith;
    return reply;
  };

  return ACLMessage;

})();

Agent = (function() {

  function Agent() {
    this.aid = null;
  }

  Agent.prototype.post = function(msg) {
    return self.postMessage(msg);
  };

  Agent.prototype.onInit = function(args) {};

  Agent.prototype.onMessage = function(msg) {};

  Agent.prototype.onStep = function(step) {
    var msg;
    msg = {
      opcode: OpCode.STEP,
      aid: this.aid,
      info: step
    };
    return this.post(msg);
  };

  Agent.prototype.getState = function() {
    return {};
  };

  Agent.prototype.moveToServer = function() {
    var agState, msg;
    agState = this.getState();
    msg = {
      opcode: OpCode.MOVE_TO_SERVER,
      aid: this.aid,
      state: agState
    };
    return this.post(msg);
  };

  return Agent;

})();

self.agentInstance = null;

self.onmessage = function(ev) {
  var initMsg, msg;
  msg = ev.data;
  if (msg.opcode === OpCode.INIT) {
    self.agentInstance.aid = msg.aid;
    self.agentInstance.onInit(msg.args);
    initMsg = {
      opcode: OpCode.INIT,
      aid: msg.aid
    };
    return postMessage(initMsg);
  } else {
    return self.agentInstance.onMessage(msg);
  }
};
